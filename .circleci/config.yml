# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  application-build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    resource_class: medium
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  # Creating a docker image from application
  application-create-image:   
    machine: true
    resource_class: medium
    steps:
      - checkout

      # Build the application container image
      - run:
          name: Build Image
          command: |
            docker build . -t $(echo $DOCKER_REPO)/techchallengeapp:latest

      # Push the application image to docker registry
      - run:
          name: Push Image
          command: |
            echo "$DOCKER_PASS" | docker login $DOCKER_REPO --username $DOCKER_USER --password-stdin
            docker push $(echo $DOCKER_REPO)/techchallengeapp:latest

  # Creating the terraform plan block to demostrate all the actions terraform will do on cloud environment
  terraform-plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd terraform
            terraform init -input=false
            terraform plan -var-file variables.tfvars
      
  # Creating the terraform apply block to create the infrastructure on Azure
  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd terraform
            terraform apply -auto-approve
            
            # Copy the k8s files and replace some field with terraform outputs
            cp ../k8s/*.yaml .
            sed -i 's/<dbuser>/'"$(terraform output --raw pgsql_administrator_login)"'/g' servian-dp.yaml
            sed -i 's/<dbpass>/'"$(terraform output --raw pgsql_administrator_login_password)"'/g' servian-dp.yaml
            sed -i 's/<dbhost>/'"$(terraform output --raw pgsql_name)"'.postgres.database.azure.com/g' servian-dp.yaml
            sed -i 's/<reponame>/'"$DOCKER_REPO"'/g' servian-dp.yaml

            # Create one output folder and pushih the yaml files on CircleCi
            mkdir output
            cp *.yaml output

      # Using the persit workspace to get the terraform tfstate and tfapply file on others steps
      - persist_to_workspace:
          root: .
          paths:
            - .

      # Publish the k8s files throught CircleCi
      - store_artifacts:
          path: terraform/output
  
  # Deploy the docker image to AKS
  application-deploy:
    machine: true
    steps:
      - checkout
      # Attach the workspace to get the files changed during the other steps
      - attach_workspace:
          at: .
      - run:
          # Install the az cli to connect to Azure account
          name: Install Az-Cli
          command: |
            sudo apt-get update
            sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
            curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
            AZ_REPO=$(lsb_release -cs) && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
            sudo apt-get update && sudo apt-get install azure-cli

      - run:
          # Install the kubectl to perform kubernetes commands
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

      - run:
          # use the k8s files to deploy the application to AKS
          name: Deploy application to AKS
          command: |
            # Connect to azure account
            az login --service-principal --tenant $AZURE_SP_TENANT -u $AZURE_SP -p "$AZURE_SP_PASSWORD"
            az account set --subscription $ARM_SUBSCRIPTION_ID
            
            # Get AKS the Kubernetes credentials 
            az aks get-credentials --name $AZURE_AKS_NAME --resource-group $AZURE_RG_NAME
            
            # Navigate to terraform folder and execute the kubernetes commands
            cd terraform
            kubectl apply -f servian-dp.yaml
            kubectl apply -f servian-sv.yaml
            kubectl apply -f servian-ing.yaml
  
  # Creating the terraform pna destroy block to demistrate what terraform will do on cloud environment
  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy -var-file variables.tfvars

  # Creating the terraform apply destroy block to destroy the infrastructure on Azure
  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - application-build
      - terraform-plan-apply:
          requires:
            - application-build
      # Block to wait until someone approve the next steps
      - terraform-hold-apply:
          type: approval
          requires:
            - terraform-plan-apply
      - terraform-apply:
          requires:
            - terraform-hold-apply
      - application-create-image:
          requires: 
            - terraform-apply
      - application-deploy:
          requires: 
            - application-create-image
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - terraform-plan-destroy:
          requires:
            - application-deploy
      # Block to wait until someone approve the next steps
      - terraform-hold-destroy:
          type: approval
          requires:
            - terraform-plan-destroy
      - terraform-destroy:
          requires:
            - terraform-hold-destroy
