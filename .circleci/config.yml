# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  application-build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    resource_class: medium
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  # Creating a docker image from application
  application-create-image:   
    machine: true
    resource_class: medium
    steps:
      - checkout

      # Build the application container image
      - run:
          name: Build Image
          command: |
            docker build . -t $(echo $DOCKER_REPO)/techchallengeapp:latest

      # Push the application image to docker registry
      - run:
          name: Push Image
          command: |
            echo "$DOCKER_PASS" | docker login $DOCKER_REPO --username $DOCKER_USER --password-stdin
            docker push $(echo $DOCKER_REPO)/techchallengeapp:latest

  # Creating the terraform plan block to demostrate all the actions terraform will do on cloud environment
  terraform-plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd terraform
            terraform init -input=false
            terraform plan -out tfapply -var-file variables.tfvars
      
      # Using the persit workspace to get the terraform tfstate and tfapply file on others steps
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Creating the terraform apply block to create the infrastructure on Azure
  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd terraform
            terraform apply -auto-approve tfapply
            
            # Copy the k8s files and replace some field with terraform outputs
            cp ../k8s/*.yaml .
            sed -i 's/<dbuser>/'"$(terraform output --raw pgsql_administrator_login)"'/g' servian-dp.yaml
            sed -i 's/<dbpass>/'"$(terraform output --raw pgsql_administrator_login_password)"'/g' servian-dp.yaml
            sed -i 's/<dbhost>/'"$(terraform output --raw pgsql_name)"'.postgres.database.azure.com/g' servian-dp.yaml
            sed -i 's/<reponame>/'"$DOCKER_REPO"'/g' servian-dp.yaml

            # Create one output folder and pushih the yaml files on CircleCi
            mkdir output
            cp *.yaml output

      # Using the persit workspace to get the terraform tfstate and tfapply file on others steps
      - persist_to_workspace:
          root: .
          paths:
            - .

      # Publish the k8s files through CircleCi
      - store_artifacts:
          path: terraform/output
  
  application-deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    resource_class: medium
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            go get github.com/GeertJohan/go.rice/rice
            mkdir output
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/

            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output
  
  # Creating the terraform pna destroy block to demistrate what terraform will do on cloud environment
  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy -out tfdestroy -var-file variables.tfvars

      # Using the persit workspace to get the terraform tfstate and tfapply file on others steps
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Creating the terraform apply destroy block to destroy the infrastructure on Azure
  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve tfdestroy
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - application-build
      - terraform-plan-apply:
          requires:
            - application-build
      # Block to wait until someone approve the next steps
      - terraform-hold-apply:
          type: approval
          requires:
            - terraform-plan-apply
      - terraform-apply:
          requires:
            - terraform-hold-apply
      - application-create-image:
          requires: 
            - terraform-apply
      - application-deploy:
          requires: 
            - application-create-image
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - terraform-plan-destroy:
          requires:
            - application-deploy
      # Block to wait until someone approve the next steps
      - terraform-hold-destroy:
          type: approval
          requires:
            - terraform-plan-destroy
      - terraform-destroy:
          requires:
            - terraform-hold-destroy
